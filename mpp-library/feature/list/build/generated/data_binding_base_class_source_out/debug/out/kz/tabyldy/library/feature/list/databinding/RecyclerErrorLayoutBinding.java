// Generated by view binder compiler. Do not edit!
package kz.tabyldy.library.feature.list.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kz.tabyldy.library.feature.list.R;

public final class RecyclerErrorLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayoutCompat rootView;

  @NonNull
  public final TextView errorHeader;

  @NonNull
  public final ImageView errorImage;

  @NonNull
  public final TextView errorMsgText;

  @NonNull
  public final MaterialButton retryButton;

  private RecyclerErrorLayoutBinding(@NonNull LinearLayoutCompat rootView,
      @NonNull TextView errorHeader, @NonNull ImageView errorImage, @NonNull TextView errorMsgText,
      @NonNull MaterialButton retryButton) {
    this.rootView = rootView;
    this.errorHeader = errorHeader;
    this.errorImage = errorImage;
    this.errorMsgText = errorMsgText;
    this.retryButton = retryButton;
  }

  @Override
  @NonNull
  public LinearLayoutCompat getRoot() {
    return rootView;
  }

  @NonNull
  public static RecyclerErrorLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecyclerErrorLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recycler_error_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecyclerErrorLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.error_header;
      TextView errorHeader = ViewBindings.findChildViewById(rootView, id);
      if (errorHeader == null) {
        break missingId;
      }

      id = R.id.error_image;
      ImageView errorImage = ViewBindings.findChildViewById(rootView, id);
      if (errorImage == null) {
        break missingId;
      }

      id = R.id.error_msg_text;
      TextView errorMsgText = ViewBindings.findChildViewById(rootView, id);
      if (errorMsgText == null) {
        break missingId;
      }

      id = R.id.retry_button;
      MaterialButton retryButton = ViewBindings.findChildViewById(rootView, id);
      if (retryButton == null) {
        break missingId;
      }

      return new RecyclerErrorLayoutBinding((LinearLayoutCompat) rootView, errorHeader, errorImage,
          errorMsgText, retryButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
