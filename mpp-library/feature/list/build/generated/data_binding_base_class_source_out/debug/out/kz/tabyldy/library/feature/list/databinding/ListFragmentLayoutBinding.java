// Generated by view binder compiler. Do not edit!
package kz.tabyldy.library.feature.list.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kz.tabyldy.library.feature.list.R;

public final class ListFragmentLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RecyclerErrorLayoutBinding errorView;

  @NonNull
  public final RecyclerLoadingLayoutBinding loadingView;

  @NonNull
  public final RecyclerView repoRecyclerView;

  private ListFragmentLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull RecyclerErrorLayoutBinding errorView,
      @NonNull RecyclerLoadingLayoutBinding loadingView, @NonNull RecyclerView repoRecyclerView) {
    this.rootView = rootView;
    this.errorView = errorView;
    this.loadingView = loadingView;
    this.repoRecyclerView = repoRecyclerView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListFragmentLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListFragmentLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_fragment_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListFragmentLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.error_view;
      View errorView = ViewBindings.findChildViewById(rootView, id);
      if (errorView == null) {
        break missingId;
      }
      RecyclerErrorLayoutBinding binding_errorView = RecyclerErrorLayoutBinding.bind(errorView);

      id = R.id.loading_view;
      View loadingView = ViewBindings.findChildViewById(rootView, id);
      if (loadingView == null) {
        break missingId;
      }
      RecyclerLoadingLayoutBinding binding_loadingView = RecyclerLoadingLayoutBinding.bind(loadingView);

      id = R.id.repo_recycler_view;
      RecyclerView repoRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (repoRecyclerView == null) {
        break missingId;
      }

      return new ListFragmentLayoutBinding((ConstraintLayout) rootView, binding_errorView,
          binding_loadingView, repoRecyclerView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
