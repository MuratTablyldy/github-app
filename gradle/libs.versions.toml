[versions]
# kotlin
kotlinVersion = "1.5.20"
kotlinSerializationVersion = "1.5.1"
# kotlinx
kotlinxSerializationVersion = "1.2.2"
kotlinxDateTimeVersion = "0.2.1"
coroutinesVersion = "1.6.4"

# gradle
kotlinGradlePluginVersion = "1.9.0"
# ktor
ktorClientVersion = "1.6.1"

# moko
mokoGraphicsVersion = "0.8.0"
mokoParcelizeVersion = "0.7.1"
mokoResourcesVersion = "0.16.2"
mokoMvvmVersion = "0.11.0"
mokoErrorsVersion = "0.4.0"
mokoNetworkVersion = "0.16.0"
mokoUnitsVersion = "0.6.1"
mokoPermissionsVersion = "0.10.1"
mokoMediaVersion = "0.9.0"
mokoFieldsVersion = "0.8.0"
mokoTestVersion = "0.4.0"

# multiplatform
multiplatformSettingsVersion = "1.0.0"
napierVersion = "1.5.0"

# android
materialVersion = "1.9.0"
recyclerViewVersion = "1.3.1"
swipeRefreshLayoutVersion = "1.1.0"
constraintLayoutVersion = "2.1.4"
lifecycleVersion = "2.6.1"
glideVersion = "4.12.0"
hiltVersion = "2.46.1"
androidAppCompatVersion = "1.6.1"
multidexVersion = "2.0.1"
navigationVersion = "2.6.0"
splashScreenVersion = "1.0.1"
fragmentVersion = "1.6.1"
# android tests
espressoCoreVersion = "3.5.1"
testRunnerVersion = "1.5.2"
testExtJunitVersion = "1.1.5"
testCoreVersion = "1.5.0"
robolectricVersion = "4.6.1"
retrofitVersion = "2.9.0"
tikerVersion = "2.0.4"
mdToolVersion = "1.2.4"
loggingInterceptorVersion ="5.0.0-alpha.11"
core-ktx = "1.12.0"
junit = "4.13.2"
metadataJVMVersion = "0.3.0"

xComponentVersion ="2.1.3"

okHttpInterceptorVersion = "5.0.0-alpha.11"
[libraries]
# kotlin
kotlinTestJUnit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlinVersion" }
korlinSerialization = {module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinSerializationVersion"}
# kotlinx
kotlinSerialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationVersion" }
kotlinxDateTime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDateTimeVersion" }
coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutinesVersion" }

#gradle
kotlinGradlePlugin = {module ="org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlinGradlePluginVersion"}
# ktor
ktorClient = { module = "io.ktor:ktor-client-core", version.ref = "ktorClientVersion" }
ktorClientLogging = { module = "io.ktor:ktor-client-logging", version.ref = "ktorClientVersion" }
ktorClientOkHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktorClientVersion" }
ktorClientMock = { module = "io.ktor:ktor-client-mock", version.ref = "ktorClientVersion" }

# moko
mokoResources = { module = "dev.icerock.moko:resources", version.ref = "mokoResourcesVersion" }
mokoParcelize = { module = "dev.icerock.moko:parcelize", version.ref = "mokoParcelizeVersion" }
mokoGraphics = { module = "dev.icerock.moko:graphics", version.ref = "mokoGraphicsVersion" }
mokoErrors = { module = "dev.icerock.moko:errors", version.ref = "mokoErrorsVersion" }
mokoPermissions = { module = "dev.icerock.moko:permissions", version.ref = "mokoPermissionsVersion" }
mokoMedia = { module = "dev.icerock.moko:media", version.ref = "mokoMediaVersion" }
mokoFields = { module = "dev.icerock.moko:fields", version.ref = "mokoFieldsVersion" }
mokoTestCore = { module = "dev.icerock.moko:test-core", version.ref = "mokoTestVersion" }
fragment = {module = "androidx.fragment:fragment-ktx", version.ref = "fragmentVersion"}
mokoMvvmCore = { module = "dev.icerock.moko:mvvm-core", version.ref = "mokoMvvmVersion" }
mokoMvvmLiveData = { module = "dev.icerock.moko:mvvm-livedata", version.ref = "mokoMvvmVersion" }
mokoMvvmState = { module = "dev.icerock.moko:mvvm-state", version.ref = "mokoMvvmVersion" }
mokoMvvmDataBinding = { module = "dev.icerock.moko:mvvm-databinding", version.ref = "mokoMvvmVersion" }
mokoMvvmTest = { module = "dev.icerock.moko:mvvm-test", version.ref = "mokoMvvmVersion" }
mokoNetwork = { module = "dev.icerock.moko:network", version.ref = "mokoNetworkVersion" }
mokoNetworkErrors = { module = "dev.icerock.moko:network-errors", version.ref = "mokoNetworkVersion" }

mokoUnits = { module = "dev.icerock.moko:units", version.ref = "mokoUnitsVersion" }
mokoUnitsTest = { module = "dev.icerock.moko:units-test", version.ref = "mokoUnitsVersion" }


# multiplatform
multiplatformSettings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettingsVersion" }
multiplatformSettingsTest = { module = "com.russhwolf:multiplatform-settings-test", version.ref = "multiplatformSettingsVersion" }

napier = { module = "io.github.aakira:napier", version.ref = "napierVersion" }

# android
appCompat = { module = "androidx.appcompat:appcompat", version.ref = "androidAppCompatVersion" }
material = { module = "com.google.android.material:material", version.ref = "materialVersion" }
recyclerView = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerViewVersion" }
swipeRefreshLayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version.ref = "swipeRefreshLayoutVersion" }
constraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayoutVersion" }
glide = { module = "com.github.bumptech.glide:glide", version.ref = "glideVersion" }
lifecycleViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycleVersion" }
lifecycleLivedata = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycleVersion" }
lifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleVersion" }
lifecycleViewModelSavedState = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "lifecycleVersion" }
lifecycleCommonJava8 = { module = "androidx.lifecycle:lifecycle-common-java8", version.ref = "lifecycleVersion" }
lifecycleServices = { module = "androidx.lifecycle:lifecycle-service", version.ref = "lifecycleVersion" }
lifecycleProcess = { module = "androidx.lifecycle:lifecycle-process", version.ref = "lifecycleVersion" }
lifecycleReactiveStreams = { module = "androidx.lifecycle:lifecycle-reactivestreams-ktx", version.ref = "lifecycleVersion" }
hilt = { module = "com.google.dagger:hilt-android", version.ref = "hiltVersion" }
multidex = { module = "androidx.multidex:multidex", version.ref = "multidexVersion" }
navigation = {module =  "androidx.navigation:navigation-fragment-ktx", version.ref = "navigationVersion"}
navigationUI = {module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigationVersion"}
retrofit = {module = "com.squareup.retrofit2:retrofit", version.ref = "retrofitVersion"}
okHttpInteceptor = {module = "com.squareup.okhttp3:logging-interceptor", version.ref = "loggingInterceptorVersion"}
coreKtx = {module ="androidx.core:core-ktx",version.ref = "core-ktx"}
# android tests
espressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCoreVersion" }
testCore = { module = "androidx.test:core", version.ref = "testCoreVersion" }
robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectricVersion" }
testRunner = { module = "androidx.test:runner", version.ref = "testRunnerVersion" }
testRules = { module = "androidx.test:rules", version.ref = "testRunnerVersion" }
testExtJunit = { module = "androidx.test.ext:junit", version.ref = "testExtJunitVersion" }
# tooling
hiltCompiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hiltVersion" }
metadata = {module = "org.jetbrains.kotlinx:kotlinx-metadata-jvm", version.ref = "metadataJVMVersion"}
tiker = {module = "com.robinhood.ticker:ticker", version.ref = "tikerVersion"}
mdTool ={module = "com.youbenzi:MDTool", version.ref = "mdToolVersion"}
hiltLib = {module = "com.google.dagger:hilt-android",version.ref = "hiltVersion"}
httpInterceptor = {module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okHttpInterceptorVersion"}
splashScreen = {module = "androidx.core:core-splashscreen",version.ref ="splashScreenVersion"}
corektx = { group = "androidx.core", name = "core-ktx", version.ref = "core-ktx" }
xComponent = {group = "com.github.valeryponomarenko.componentsmanager" , name ="androidx",version.ref ="xComponentVersion"}
# gradle plugins artifacts
mokoResourcesGeneratorGradle = { module = "dev.icerock.moko:resources-generator", version.ref = "mokoResourcesVersion" }
mokoNetworkGeneratorGradle = { module = "dev.icerock.moko:network-generator", version.ref = "mokoNetworkVersion" }
mokoUnitsGeneratorGradle = { module = "dev.icerock.moko:units-generator", version.ref = "mokoUnitsVersion" }
kotlinSerializationGradle = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlinVersion" }
hiltGradle = { module = "com.google.dagger:hilt-android-gradle-plugin", version.ref = "hiltVersion" }

junit = { group = "junit", name = "junit", version.ref = "junit" }

